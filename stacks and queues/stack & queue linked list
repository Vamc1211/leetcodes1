class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
class Stack:
    def __init__(self):
        self.head = None
 
    # Checks if stack is empty
    def isempty(self):
        if self.head == None:
            return True
        else:
            return False
 
    # Method to add data to the stack
    # adds to the start of the stack
    def push(self, data):
 
        if self.head == None:
            self.head = Node(data)
 
        else:
            newnode = Node(data)
            newnode.next = self.head
            self.head = newnode
 
    # Remove element that is the current head (start of the stack)
    def pop(self):
 
        if self.isempty():
            return None
 
        else:
            # Removes the head node and makes
            # the preceding one the new head
            poppednode = self.head
            self.head = self.head.next
            poppednode.next = None
            return poppednode.data
 
    # Returns the head node data
    def peek(self):
 
        if self.isempty():
            return None
 
        else:
            return self.head.data
  **********QUEUES************
  class Node:
  def __init__(self, data):
        self.data = data
        self.next = None
class Queue:
 
    def __init__(self):
        self.front = self.rear = None
 
    def isEmpty(self):
        return self.front == None
 
    # Method to add an item to the queue
    def EnQueue(self, item):
        temp = Node(item)
 
        if self.rear == None:
            self.front = self.rear = temp
            return
        self.rear.next = temp
        self.rear = temp
 
    # Method to remove an item from queue
    def DeQueue(self):
 
        if self.isEmpty():
            return
        temp = self.front
        self.front = temp.next
 
        if(self.front == None):
            self.rear = None
