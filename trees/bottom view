Given a binary tree, print the bottom view from left to right.
A node is included in bottom view if it can be seen when we look at the tree from bottom.

                      20
                    /    \
                  8       22
                /   \        \
              5      3       25
                    /   \      
                  10    14

For the above tree, the bottom view is 5 10 3 14 25.
If there are multiple bottom-most nodes for a horizontal distance from root, 
then print the later one in level traversal. For example, in the below diagram,
3 and 4 are both the bottommost nodes at horizontal distance 0, we need to print 4.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree the output should be 5 10 4 14 25.


class Solution:
    def bottomView(self,root):
        if not root:
            return []

        result = []
        queue = deque([(root, 0)])  # Each element is a tuple (node, horizontal distance)

    # Dictionary to store the bottommost node for each horizontal distance
        bottom_view_dict = {}

        while queue:
            node, hd = queue.popleft()

        # Update the dictionary with the current node for the horizontal distance
            bottom_view_dict[hd] = node.data

        # Enqueue left and right children with updated horizontal distance
            if node.left:
                queue.append((node.left, hd - 1))
            if node.right:
                queue.append((node.right, hd + 1))

    # Extract the values from the dictionary, sorted by horizontal distance
        
        sorted_bottom_view = [bottom_view_dict[hd] for hd in sorted(bottom_view_dict.keys())]

        return sorted_bottom_view
