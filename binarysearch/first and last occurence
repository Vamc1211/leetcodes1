Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

code:
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        low = 0
        high = len(nums) - 1
        x = -1

        while low <= high:
            mid = (low + high) // 2
            if nums[mid] == target:
                x = mid
                break
            elif nums[mid] < target:
                low = mid + 1
            else:
                high = mid - 1

        if x == -1:
            return [-1, -1]  # Target not found

        # Find lower bound
        left = right = x
        while left > 0 and nums[left - 1] == target:
            left -= 1

        # Find upper bound
        while right < len(nums) - 1 and nums[right + 1] == target:
            right += 1

        return [left, right]
